
import IPython

# TODO try to configure my debugger like so:
# https://stackoverflow.com/questions/4716533
# ...to be able to use it (/ another debugger) inside multiprocessing subprocesses

# TODO means of adding separate hotkeys (modifiers on arrows? Pg[Up/Dn]?)
# for scrolling global history (for a given script?) indep of current history

# TODO possible to include something in here to avoid nasty BdbQuit traceback when
# exiting a `ipdb.set_trace()` breakpoint via Ctrl+D ?

# Interactive shell
# TODO maybe change to alias interactii import IPython; IPython.embed()
# ? (or is IPython always installed when ipdb is, anyway?)
alias interacti IPython.embed()

alias ppd pp dir(%1)

alias t type(%1)

# TODO alias to toggle pd.set_option('display.max_rows', x)
# between x=default value and x=-1 (no maximum)
# TODO or new aliases for pd / change print aliases to detect whether input is a
# series / dataframe and print(x.to_string()) then at least, maybe also toggling
# the max_rows / column / print width options before and after

alias k %1.keys()
alias v %1.values()
alias kh !next(iter(%1.keys()))
alias vh !next(iter(%1.values() if type(%1) is dict else %1))

# TODO actually take arguments for this too (and allow either str literal or variable)
# (Path too ideally)
alias ls import subprocess; subprocess.run(['ls',  '--color'])
alias lr import subprocess; subprocess.run(['ls', '--color', '-ltr'])

# [d]ataframe [p]rint
# Seems the default max_rows/max_cols/max_colwidth are all unrestricted.
# Converting .to_frame() if Series, cause Series.to_string() missing some important
# options, like max_colwidth (and limits it by default).
alias dp print((%1.to_frame() if isinstance(%1, pd.Series) else %1).to_string())

# TODO cat alias

# TODO TODO alias like grep, but to use colorized / just unicode color control sequences
# to color text matching (2nd) argument to alias

# TODO any way to get an alias for printing current exception (when debugger is in an
# except block) to work? traceback.print_exc() in `except` currently produces:
# AttributeError: 'TerminalPdb' object has no attribute 'do_traceback'

# TODO test for stuff that i want to keep open while continuing debugging. work as is?
# or need to run in background somehow?
alias x import subprocess; subprocess.run(['xdg-open', str(%1)])

# this is to go to line in vim, which is assumed to be in neighboring window.
# also assumes linux with xdotool installed.
#
# function='trace_dispatch' seems to be last element in stack that is debugger related
# (all preceding elements should be too?). stuff after should be from before debugger
# entered, i.e. the context in which the debugger is actually initially operating in.
#
# TODO possible to refactor to use a predefined fn or something (rather than this huge
# ugly one-liner)?
alias g import inspect,subprocess,time; subprocess.run(f'xdotool key alt+grave; xdotool key Escape; sleep 0.05; xdotool type ":{inspect.stack()[[x.function for x in inspect.stack()].index("trace_dispatch") + 1].lineno}"; sleep 0.05; xdotool key Return', shell=True)
