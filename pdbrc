
import IPython

# TODO try to configure my debugger like so:
# https://stackoverflow.com/questions/4716533
# ...to be able to use it (/ another debugger) inside multiprocessing subprocesses

# TODO means of adding separate hotkeys (modifiers on arrows? Pg[Up/Dn]?)
# for scrolling global history (for a given script?) indep of current history

# TODO possible to include something in here to avoid nasty BdbQuit traceback when
# exiting a `ipdb.set_trace()` breakpoint via Ctrl+D ?

# Interactive shell
# TODO maybe change to alias interactii import IPython; IPython.embed()
# ? (or is IPython always installed when ipdb is, anyway?)
alias interacti IPython.embed()

alias ppd pp dir(%1)

alias t type(%1)

# TODO alias to toggle pd.set_option('display.max_rows', x)
# between x=default value and x=-1 (no maximum)
# TODO or new aliases for pd / change print aliases to detect whether input is a
# series / dataframe and print(x.to_string()) then at least, maybe also toggling
# the max_rows / column / print width options before and after

alias k %1.keys()
alias v %1.values()
alias kh !next(iter(%1.keys()))
alias vh !next(iter(%1.values() if type(%1) is dict else %1))

# NOTE on my how I settled on my (exec-based) hacky solution for an optional Path arg
# in an alias (used for `lr` alias below)
#
# no explicit mention of optional args in:
# https://docs.python.org/3/library/pdb.html#debugger-aliases
# ...maybe the %* "all the parameters" var could work?
#
# when no arg passed, results in `SyntaxError: invalid syntax`
# (prob same if it were just print(%1))
# alias test print(repr(%1))
#
# seems like it might be basis of something useful
# (works w/ 0 and multiple args)
# alias t2 print(%*)
#
# > t3
#
# > t3 'test'
# t e s t
# > t3 <some Path object>
# TypeError: 'PosixPath' object is not iterable
# alias t3 print(*tuple(%*))
#
# %* is not a single object. this fails for anything other than 1 argument.
# alias t4 print(type(%*))
#
# again, SyntaxError w/ no args
# alias t5 print([x for x in %*])
#
# (works w/ exec but not eval, which SyntaxError's for either 0/1 input)
# https://stackoverflow.com/questions/2524853/how-should-i-put-try-except-in-a-single-line
# alias t6 exec('try: print([x for x in tuple(%*)])\nexcept TypeError: print(str(%*))')
# > t6
# []
# > plot_root = Path('pdf')
# > t6 plot_root
# pdf
#
# if i could get it to work w/ eval, might be able to avoid setting this global var, but
# for now i can get it to work like:
# alias t7 exec('try: _ls_dir=list(tuple(%*))\nexcept TypeError: _ls_dir=[str(%*)]'); print(_ls_dir); print(len(_ls_dir))

# this version was almost what i wanted, but it printed a line like:
# CompletedProcess(args=['ls', '--color', '-ltr', 'pdf'], returncode=0)
# after the ls output.
# alias lr1 import subprocess; exec('try: _ls_dir=list(tuple(%*))\nexcept TypeError: _ls_dir=[str(%*)]'); subprocess.run(['ls',  '--color', '-ltr'] + _ls_dir)

# see comment above for what this exec part is doing
alias ls import subprocess; exec('try: _ls_dir=list(tuple(%*))\nexcept TypeError: _ls_dir=[str(%*)]'); print(subprocess.run(['ls',  '--color'] + _ls_dir, capture_output=True, text=True).stdout.strip())

# without .strip(), there is a blank line following ls output.
alias lr import subprocess; exec('try: _ls_dir=list(tuple(%*))\nexcept TypeError: _ls_dir=[str(%*)]'); print(subprocess.run(['ls',  '--color', '-ltr'] + _ls_dir, capture_output=True, text=True).stdout.strip())

# [d]ataframe [p]rint
# Seems the default max_rows/max_cols/max_colwidth are all unrestricted.
# Converting .to_frame() if Series, cause Series.to_string() missing some important
# options, like max_colwidth (and limits it by default).
alias dp print((%1.to_frame() if isinstance(%1, pd.Series) else %1).to_string())

# TODO cat alias

# TODO TODO alias like grep, but to use colorized / just unicode color control sequences
# to color text matching (2nd) argument to alias

# TODO any way to get an alias for printing current exception (when debugger is in an
# except block) to work? traceback.print_exc() in `except` currently produces:
# AttributeError: 'TerminalPdb' object has no attribute 'do_traceback'

# TODO test for stuff that i want to keep open while continuing debugging. work as is?
# or need to run in background somehow?
alias x import subprocess; subprocess.run(['xdg-open', str(%1)])
# TODO test this works (should open parent directory of input)
alias xd import subprocess; subprocess.run(['xdg-open', str(Path(%1).parent)])

# this is to go to line in vim, which is assumed to be in neighboring window.
# also assumes linux with xdotool installed.
#
# function='trace_dispatch' seems to be last element in stack that is debugger related
# (all preceding elements should be too?). stuff after should be from before debugger
# entered, i.e. the context in which the debugger is actually initially operating in.
#
# TODO possible to refactor to use a predefined fn or something (rather than this huge
# ugly one-liner)?
# TODO TODO update to work i've stepped up levels since starting debugging (should go to
# current line, not line initially entered when debugging started)
#
# final `; None` is just to try to not get an extra line with the
# `CompletedProcess(...)` output of the subprocess call
alias g import inspect,subprocess,time; subprocess.run(f'xdotool key alt+grave; xdotool key Escape; sleep 0.05; xdotool type ":{inspect.stack()[[x.function for x in inspect.stack()].index("trace_dispatch") + 1].lineno}"; sleep 0.05; xdotool key Return; xdotool type "zz"', shell=True); None

# TODO TODO something similar to copy previous command run to clipboard (maybe w/
# 'assert ' prefix, or an option for that?)
# TODO adapt to just print command if pyperclip not available (might now, just w/
# error shown? want silent tho)
#
# requires pyperclip installed to work
# https://stackoverflow.com/questions/37658154/get-command-line-arguments-as-string
alias cmd import sys,shlex; cstr = ' '.join(map(shlex.quote, sys.argv)); print(cstr); import pyperclip; pyperclip.copy(cstr)
