#!/usr/bin/env bash

# This is here to prevent dotbot-in-WSL from setting up symlinks that only
# work inside WSL.
# Though now that I've looked a bit into it, it's not clear if there is ANY
# way to make symlinks that would work in both...

# https://stackoverflow.com/questions/38859145
if grep -q Microsoft /proc/version; then
    # TODO TODO might need to fix how python/python3 both yield
    # "Permission denied" errors when trying to run from git bash though...
    # "bash: /c/Users/tom/AppData/Local/Microsoft/WindowsApps/python3:
    # Permission denied"
    echo "Do not run install from a WSL shell. Use Git Bash or similar."
    echo "Exiting."
    exit 1
fi

set -e

if [ "$#" -eq 0 ]; then
    CONFIG="install.conf.yaml"
else
    if [ "$#" -ne 1 ]; then
        echo "Too many arguments!"
    fi
    CONFIG="$1"
fi

DOTBOT_DIR="dotbot"
DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# TODO delete if the permissions can be fixed from ubuntu s.t. they will work
# initially when cloned on WSL
# (or refactor link_only stuff so it outputs YAML that includes this step and
# global submodule recursive update)
# https://stackoverflow.com/questions/38859145
if grep -q Microsoft /proc/version; then
    chmod 600 ssh_config
fi

cd "${BASEDIR}"
git submodule update --init --recursive

"${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}"

# No longer passing remaining args through because I'm relying on one positional
# arg to indicate config path, so would need to change how that's handled and
# then modify "${@}" appropriately if I wanted to restore this behavior.
# See https://unix.stackexchange.com/questions/258512 for one way to modify
# this variable.
#"${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}" "${@}"
